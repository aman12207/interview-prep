Q. What is React?
React is an open-source frontend JavaScript library which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.

React is just a UI Library that allows us to write more javascript to have interactivity on our websites.

Q. What are the major features of React?
The major features of React are:
a.It uses VirtualDOM instead of RealDOM considering that RealDOM manipulations are expensive.
b.Supports server-side rendering.
c.Follows Unidirectional data flow or data binding.
d.Uses reusable/composable UI components to develop the view.

Q. What is JSX?
JSX stands for JavaScript XML. It allows us to write HTML in React. Basically it just provides syntactic sugar for the React.createElement() function. It looks very similar to HTML, but is converted to JavaScript behind the scenes.

Q. What is Syntactic sugar?
syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express.

Q. What is the difference between Element and Component?
An Element is a plain object describing what we want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated.
Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output.

Q. How to create components in React?
There are two possible ways to create a component.
Function Components: This is the simplest way to create a component. These are pure JavaScript functions that accept props object as first parameter and return React elements:
Class Components: We can also use ES6 class to define a component.

Q. When to use a Class Component over a Function Component?
If the component needs state or lifecycle methods then we use class component otherwise we use function component. However, from React 16.8 with the addition of Hooks, we could use state , lifecycle methods and other features that were only available in class component right in our function component.

Q. What are Pure Components?
React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for us. When props or state changes, PureComponent will do a shallow comparison on both props and state.If the value of the previous state or props and the new state or props is the same, the component is not re-rendered. Pure Components restricts the re-rendering ensuring the higher performance of the Component.

Q. What is State?
State is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.
State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any other component till the owner component decides to pass it.

Q. What are Props?
Props is short for properties
Attributes on Components get converted into an object called Props
Props make components more reusable
Props are an object, so we can destructure them.
They are data passed down from a parent component to a child component.

Q. What are props.children?
props.children represents the content between the tags of a Component.
props.children can be an array or a single item.
props.children can contain text and/or React Elements and/or React Components.

Q. What is the purpose of props in react?
1.Pass custom data to the component.
2.Trigger state changes.
3.Use via this.props.reactProp inside component's render() method.

Q. What is the difference b/w state and props?
Both state and props are plain javascript objects. Both of them hold information that influences the output of render, but they are different in their functionality w.r.t component. Props get passed to components similar to function parameters whereas state is managed within the component similar to variables declared within a function. 

Q. Why should we not update the state directly?
If you try to update the state directly then it won't re-render the component.

Q. Why we use setState() method?
We use setState() method to update the state. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.

Q. What is the purpose of callback function as an argument of setState()?
The callback function is invoked when setState finished and the component gets rendered. Since setState() works in an asynchronous way, the callback function is used for any post action.

Note: It is recommended to use lifecycle method rather than this callback function.

Q. What is the difference between HTML and React event handling?
a. In HTML, the event name usually represents in lowercase as a convention, whereas in React it follows camelCase convention.
b. In HTML, we can return false to prevent default behavior, whereas in React we must call preventDefault() explicitly.
c. In HTML, we need to invoke the function by appending ()parentheses, whereas in react we should not append ()parentheses with the function name.

Q. What are synthetic events in React?
SyntheticEvent is a cross-browser wrapper around the browser's native event. It's API is same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.

Q. What is the use of refs?
The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when we need a direct access to the DOM element or an instance of a component.

Q. What are React hooks?
Hooks is a new feature in React 16.8 that allows us to use state and other features of react without writing class component.

Q. what are the uses of react hooks?
1. Hooks allow you to reuse stateful logic without changing your component hierarchy
2. Hooks let you split one component into smaller functions based on what pieces are related (such as setting up a subscription or fetching data)
3. Hooks let you use more of Reactâ€™s features without classes